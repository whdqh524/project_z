// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("WEB_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "./prisma/client"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

model AdminPermissionGroup {
  id               String            @id @default(uuid())
  name             String            @unique
  adminPermissions AdminPermission[] @relation(name: "AdminPermissionToAdminPermissionGroup")
  adminUsers       AdminUser[]       @relation(name: "AdminPermissionGroupToAdminUser")

  @@map("AdminPermissionGroups")
}

model AdminPermission {
  id                     String               @id @default(uuid())
  adminPermissionGroupId String
  adminPermissionGroup   AdminPermissionGroup @relation(name: "AdminPermissionToAdminPermissionGroup", fields: [adminPermissionGroupId], references: [id])
  code                   String               @db.VarChar(20)
  canEdit                Boolean              @default(false)

  @@index([adminPermissionGroupId, code])
  @@map("AdminPermissions")
}

model User {
  id                   String                @id @default(uuid())
  adminUser            AdminUser?            @relation(name: "AdminUserToUser")
  boardComments        BoardComment[]        @relation(name: "BoardCommentToUser")
  boardComplainDetails BoardComplainDetail[] @relation(name: "BoardComplainDetailToUser")
  boardLikes           BoardLike[]           @relation(name: "BoardLikeToUser")
  boardPosts           BoardPost[]           @relation(name: "BoardPostToUser")
  boardReplies         BoardReply[]          @relation(name: "BoardReplyToUser")
  avatars              Avatar?               @relation(name: "AvatarToUser")
  platform             Int                   @default(1)
  oauthId              String                @db.VarChar(50)
  email                String?
  sns                  Json?
  nickname             String                @unique
  name                 String?
  summary              String?
  profileImageUrl      String?
  backgroundType       String                @default("COLOR") @db.VarChar(20)
  backgroundColor      String?               @db.VarChar(10)
  backgroundImageUrl   String?
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  worldComments        WorldComment[]        @relation(name: "UserToWorldComment")
  worldComplainDetails WorldComplainDetail[] @relation(name: "UserToWorldComplainDetail")
  worldFavorites       WorldFavorite[]       @relation(name: "UserToWorldFavorite")
  worldLikes           WorldLike[]           @relation(name: "UserToWorldLike")
  worldPlayLogs        WorldPlayLog[]        @relation(name: "UserToWorldPlayLog")
  worldPosts           WorldPost[]           @relation(name: "UserToWorldPost")
  worldReplies         WorldReply[]          @relation(name: "UserToWorldReply")

  @@index([oauthId])
  @@index([nickname])
  @@map("Users")
}

model AdminUser {
  id                     String                @id @default(uuid())
  accountId              String                @unique
  password               String                @db.VarChar(64)
  name                   String                @unique @db.VarChar(20)
  userId                 String                @unique
  user                   User                  @relation(name: "AdminUserToUser", fields: [userId], references: [id])
  salt                   String                @db.VarChar(32)
  department             String?
  adminPermissionGroupId String?
  adminPermissionGroup   AdminPermissionGroup? @relation(name: "AdminPermissionGroupToAdminUser", fields: [adminPermissionGroupId], references: [id])
  status                 String                @default("ALIVE") @db.VarChar(20)
  accessedAt             DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@map("AdminUsers")
}

model BoardPost {
  id                   String                @id @default(uuid())
  boardComments        BoardComment[]        @relation(name: "BoardCommentToBoardPost")
  boardComplainDetails BoardComplainDetail[] @relation(name: "BoardComplainDetailToBoardPost")
  boardComplains       BoardComplain?        @relation(name: "BoardComplainToBoardPost")
  boardLikes           BoardLike[]           @relation(name: "BoardLikeToBoardPost")
  userId               String
  user                 User                  @relation(name: "BoardPostToUser", fields: [userId], references: [id])
  board                String                @db.VarChar(20)
  category             String                @db.VarChar(20)
  title                String                @db.Text
  summary              String?               @db.Text
  content              String                @db.Text
  views                Int                   @default(0)
  commentCount         Int                   @default(0)
  likeCount            Int                   @default(0)
  thumbnailImageUrl    String?
  isExposed            Boolean               @default(true)
  isFixed              Boolean               @default(false)
  status               String                @default("ALIVE") @db.VarChar(20)
  assignedAt           DateTime              @default(now())
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  boardReplies         BoardReply[]          @relation(name: "BoardPostToBoardReply")

  @@index([board, category, status, isFixed, isExposed])
  @@fulltext([title])
  @@fulltext([content])
  @@fulltext([title, content])
  @@map("BoardPosts")
}

model BoardComment {
  id                   String                @id @default(uuid())
  userId               String
  user                 User                  @relation(name: "BoardCommentToUser", fields: [userId], references: [id])
  postId               String
  post                 BoardPost             @relation(name: "BoardCommentToBoardPost", fields: [postId], references: [id])
  content              String                @db.VarChar(200)
  replyCount           Int                   @default(0)
  likeCount            Int                   @default(0)
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  boardComplainDetails BoardComplainDetail[] @relation(name: "BoardCommentToBoardComplainDetail")
  boardComplains       BoardComplain?        @relation(name: "BoardCommentToBoardComplain")
  boardLikes           BoardLike[]           @relation(name: "BoardCommentToBoardLike")
  boardReplies         BoardReply[]          @relation(name: "BoardCommentToBoardReply")

  @@map("BoardComments")
}

model BoardReply {
  id                   String                @id @default(uuid())
  boardComplainDetails BoardComplainDetail[] @relation(name: "BoardComplainDetailToBoardReply")
  boardComplains       BoardComplain?        @relation(name: "BoardComplainToBoardReply")
  boardLikes           BoardLike[]           @relation(name: "BoardLikeToBoardReply")
  userId               String
  user                 User                  @relation(name: "BoardReplyToUser", fields: [userId], references: [id])
  postId               String
  post                 BoardPost             @relation(name: "BoardPostToBoardReply", fields: [postId], references: [id])
  commentId            String
  comment              BoardComment          @relation(name: "BoardCommentToBoardReply", fields: [commentId], references: [id])
  content              String                @db.VarChar(200)
  likeCount            Int                   @default(0)
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@map("BoardReplies")
}

model BoardComplain {
  id                   String                @id @default(uuid())
  boardComplainDetails BoardComplainDetail[] @relation(name: "BoardComplainToBoardComplainDetail")
  entityType           String                @db.VarChar(20)
  entityId             String
  process              Boolean               @default(false)
  postId               String?               @unique
  post                 BoardPost?            @relation(name: "BoardComplainToBoardPost", fields: [postId], references: [id])
  commentId            String?               @unique
  comment              BoardComment?         @relation(name: "BoardCommentToBoardComplain", fields: [commentId], references: [id])
  replyId              String?               @unique
  reply                BoardReply?           @relation(name: "BoardComplainToBoardReply", fields: [replyId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@unique([entityType, entityId])
  @@map("BoardComplains")
}

model BoardComplainDetail {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(name: "BoardComplainDetailToUser", fields: [userId], references: [id])
  boardComplainId String
  boardComplain   BoardComplain @relation(name: "BoardComplainToBoardComplainDetail", fields: [boardComplainId], references: [id])
  reason          String        @db.VarChar(20)
  content         String        @db.Text
  postId          String?
  post            BoardPost?    @relation(name: "BoardComplainDetailToBoardPost", fields: [postId], references: [id])
  commentId       String?
  comment         BoardComment? @relation(name: "BoardCommentToBoardComplainDetail", fields: [commentId], references: [id])
  replyId         String?
  reply           BoardReply?   @relation(name: "BoardComplainDetailToBoardReply", fields: [replyId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, boardComplainId])
  @@map("BoardComplainDetails")
}

model BoardLike {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(name: "BoardLikeToUser", fields: [userId], references: [id])
  entityType String        @default("Post") @db.VarChar(20)
  entityId   String
  postId     String?
  post       BoardPost?    @relation(name: "BoardLikeToBoardPost", fields: [postId], references: [id])
  commentId  String?
  comment    BoardComment? @relation(name: "BoardCommentToBoardLike", fields: [commentId], references: [id])
  replyId    String?
  reply      BoardReply?   @relation(name: "BoardLikeToBoardReply", fields: [replyId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([userId, entityId])
  @@index([entityType, userId])
  @@map("BoardLikes")
}

model DemoLink {
  id        String   @id @default(uuid())
  category  String   @db.VarChar(10)
  title     String   @db.VarChar(30)
  url       String   @db.VarChar(100)
  isExposed Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("DemoLinks")
}

model Avatar {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(name: "AvatarToUser", fields: [userId], references: [id])
  ACGUID    String
  CHGUID    String
  nickname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Avatars")
}

model WorldPost {
  id                   String                @id @default(uuid())
  worldComments        WorldComment[]        @relation(name: "WorldCommentToWorldPost")
  worldComplainDetails WorldComplainDetail[] @relation(name: "WorldComplainDetailToWorldPost")
  worldComplains       WorldComplain?        @relation(name: "WorldComplainToWorldPost")
  worldFavorites       WorldFavorite[]       @relation(name: "WorldFavoriteToWorldPost")
  worldLikes           WorldLike[]           @relation(name: "WorldLikeToWorldPost")
  worldPlayLogs        WorldPlayLog[]        @relation(name: "WorldPlayLogToWorldPost")
  userId               String
  user                 User                  @relation(name: "UserToWorldPost", fields: [userId], references: [id])
  category             String                @db.VarChar(20)
  mapGUID              String
  tag                  String                @db.Text
  title                String                @db.Text
  summary              String                @db.Text
  content              String                @db.Text
  playCount            Int                   @default(0)
  commentCount         Int                   @default(0)
  likeCount            Int                   @default(0)
  thumbnailImageUrl    Json?                 @default("[]")
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  worldReplies         WorldReply[]          @relation(name: "WorldPostToWorldReply")

  @@index([category, status])
  @@fulltext([title])
  @@fulltext([tag])
  @@fulltext([summary])
  @@fulltext([summary, title, tag])
  @@map("WorldPosts")
}

model WorldComment {
  id                   String                @id @default(uuid())
  userId               String
  user                 User                  @relation(name: "UserToWorldComment", fields: [userId], references: [id])
  postId               String
  post                 WorldPost             @relation(name: "WorldCommentToWorldPost", fields: [postId], references: [id])
  content              String                @db.VarChar(200)
  replyCount           Int                   @default(0)
  likeCount            Int                   @default(0)
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  worldComplainDetails WorldComplainDetail[] @relation(name: "WorldCommentToWorldComplainDetail")
  worldComplains       WorldComplain?        @relation(name: "WorldCommentToWorldComplain")
  worldLikes           WorldLike[]           @relation(name: "WorldCommentToWorldLike")
  worldReplies         WorldReply[]          @relation(name: "WorldCommentToWorldReply")

  @@map("WorldComments")
}

model WorldReply {
  id                   String                @id @default(uuid())
  worldComplainDetails WorldComplainDetail[] @relation(name: "WorldComplainDetailToWorldReply")
  worldComplains       WorldComplain?        @relation(name: "WorldComplainToWorldReply")
  worldLikes           WorldLike[]           @relation(name: "WorldLikeToWorldReply")
  userId               String
  user                 User                  @relation(name: "UserToWorldReply", fields: [userId], references: [id])
  postId               String
  post                 WorldPost             @relation(name: "WorldPostToWorldReply", fields: [postId], references: [id])
  commentId            String
  comment              WorldComment          @relation(name: "WorldCommentToWorldReply", fields: [commentId], references: [id])
  content              String                @db.VarChar(200)
  likeCount            Int                   @default(0)
  status               String                @default("ALIVE") @db.VarChar(20)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@map("WorldReplies")
}

model WorldComplain {
  id                   String                @id @default(uuid())
  worldComplainDetails WorldComplainDetail[] @relation(name: "WorldComplainToWorldComplainDetail")
  entityType           String                @db.VarChar(20)
  entityId             String
  process              Boolean               @default(false)
  postId               String?               @unique
  post                 WorldPost?            @relation(name: "WorldComplainToWorldPost", fields: [postId], references: [id])
  commentId            String?               @unique
  comment              WorldComment?         @relation(name: "WorldCommentToWorldComplain", fields: [commentId], references: [id])
  replyId              String?               @unique
  reply                WorldReply?           @relation(name: "WorldComplainToWorldReply", fields: [replyId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@unique([entityType, entityId])
  @@map("WorldComplains")
}

model WorldComplainDetail {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(name: "UserToWorldComplainDetail", fields: [userId], references: [id])
  worldComplainId String
  worldComplain   WorldComplain @relation(name: "WorldComplainToWorldComplainDetail", fields: [worldComplainId], references: [id])
  reason          String        @db.VarChar(20)
  content         String        @db.Text
  postId          String?
  post            WorldPost?    @relation(name: "WorldComplainDetailToWorldPost", fields: [postId], references: [id])
  commentId       String?
  comment         WorldComment? @relation(name: "WorldCommentToWorldComplainDetail", fields: [commentId], references: [id])
  replyId         String?
  reply           WorldReply?   @relation(name: "WorldComplainDetailToWorldReply", fields: [replyId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, worldComplainId])
  @@map("WorldComplainDetails")
}

model WorldFavorite {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(name: "UserToWorldFavorite", fields: [userId], references: [id])
  postId    String?
  post      WorldPost? @relation(name: "WorldFavoriteToWorldPost", fields: [postId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, postId])
  @@map("WorldFavorites")
}

model WorldLike {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(name: "UserToWorldLike", fields: [userId], references: [id])
  entityType String        @db.VarChar(20)
  entityId   String
  postId     String?
  post       WorldPost?    @relation(name: "WorldLikeToWorldPost", fields: [postId], references: [id])
  commentId  String?
  comment    WorldComment? @relation(name: "WorldCommentToWorldLike", fields: [commentId], references: [id])
  replyId    String?
  reply      WorldReply?   @relation(name: "WorldLikeToWorldReply", fields: [replyId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([userId, entityId])
  @@index([entityType, userId])
  @@map("WorldLikes")
}

model WorldPlayLog {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(name: "UserToWorldPlayLog", fields: [userId], references: [id])
  postId    String?
  post      WorldPost? @relation(name: "WorldPlayLogToWorldPost", fields: [postId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, postId])
  @@map("WorldPlayLogs")
}
